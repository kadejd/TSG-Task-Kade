{"version":3,"sources":["logo.svg","utilities/axiosUtility.js","utilities/dateUtility.js","widgets/ChartWidget.js","pages/CustomerDetails.js","pages/Dashboard.js","pages/Calls.js","layouts/TopNavBar.js","App.js","reportWebVitals.js","index.js"],"names":["GetAsync","url","a","axios","get","response","result","Object","keys","map","key","status","data","PostAsync","postdata","post","PatchAsync","patch","PutAsync","put","CreateApplication","postData","name","description","hasSupportContract","customerId","UpdateApplication","putData","applicationId","GetApplicationsByCustomerId","id","UpdateCallLog","patchData","callId","GetCallLogsByCustomerId","GetAllCustomers","GetCustomerById","GetStatisticsByCustomerId","GetAllStatus","formatADateAndTime","date","tempDate","Date","parse","Intl","DateTimeFormat","year","month","day","hour","minute","second","hour12","format","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","ChartWidget","props","this","chartType","barChart","lineChart","areaChart","pieChart","scatterChart","PieChart","width","height","Pie","labelLine","label","dataKey","entry","Cell","length","Tooltip","Legend","AreaChart","margin","top","bottom","left","right","CartesianGrid","strokeDasharray","XAxis","style","fontSize","YAxis","Area","labelOne","type","dataKeyOne","labelTwo","dataKeyTwo","labelThree","dataKeyThree","LineChart","Line","BarChart","Bar","Container","borderRadius","border","paddingBottom","marginBottom","Label","textAlign","marginTop","title","renderChartType","PureComponent","CustomerDetails","state","customer","applications","calls","stats","statusList","statusDropdownId","statusFilterDropdownOpen","pieClosedCalls","filteredCalls","applicationInfo","applicationModalOpen","toggleApplicationModal","setState","newOrUpdateApplication","applicationPostData","then","push","toast","success","applicationPutData","application","catch","error","warn","getAllCustomerDataById","applicationRes","callLogsRes","statRes","statusRes","value","closedCalls","totalCalls","satisfactory","unsatisfactory","getCustomerById","customerRes","onChangeApplicationDetails","event","tempApplicationInfo","target","checked","toggleStatusDropdown","toggleFilterStatusDropdown","filterByStatus","filteredStatus","filter","match","params","currentApplication","callsArrayId","callsLogs","Card","CardBody","overflow","CardTitle","Button","onClick","float","size","color","Table","hover","installationDate","selectCurrentApplication","ButtonDropdown","paddingLeft","isOpen","toggle","DropdownToggle","caret","DropdownMenu","statusArrayId","DropdownItem","call","callArrayId","setStatusOfCall","modalTitleHeader","Row","Col","xs","renderApplicationTable","renderCallsTable","openCalls","lastThreeMonths","Modal","ModalHeader","ModalBody","Form","FormGroup","for","sm","Input","onChange","e","placeholder","check","ModalFooter","Component","Dashboard","customers","getStatistics","Promise","all","statResponse","statList","buildStatistics","tempOpenCalls","stat","customerName","responded","awaitingResponse","tempClosedCalls","tempLastThreeMonths","month1","month2","month3","padding","Calls","callsTableData","getAllCalls","callResponse","callList","statusResponse","buildCallsTableData","concat","tableData","applicationName","TopNavBar","useState","setIsOpen","customerList","setCustomerList","SelectedCustomer","setSelectedCustomer","navSelected","setNavSelected","console","log","window","location","pathname","useEffect","includes","parseInt","slice","currentCustomer","Navbar","light","expand","NavbarToggler","Collapse","navbar","Nav","className","NavItem","NavLink","to","UncontrolledDropdown","nav","inNavbar","customerSelect","NavbarText","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35e8ce17.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios';\r\n\r\n    //Get\r\nexport const GetAsync = async (url) => {\r\n    try{\r\n        var response = await axios.get(url)\r\n        const result = Object.keys(response).map((key) => response[key]);\r\n        return{\r\n            status: result[2],\r\n            data: result[0]\r\n        }\r\n        \r\n    }catch(e){\r\n        return e;\r\n    }\r\n}\r\n\r\n    //Post\r\nexport const PostAsync = async (url, postdata) => {\r\n    try{\r\n        var response = await axios.post(url, postdata )\r\n        const result = Object.keys(response).map((key) => response[key]);\r\n        return{\r\n            status: result[2],\r\n            data: result[0]\r\n        }\r\n    }catch(e){\r\n        // alert(\"error\" + e);\r\n        return e;\r\n    }\r\n}\r\n\r\n    //Patch\r\nexport const PatchAsync = async (url, postdata) => {\r\n    try{\r\n        var response = await axios.patch(url, postdata )\r\n        const result = Object.keys(response).map((key) => response[key]);\r\n        return{\r\n            status: result[2],\r\n            data: result[0]\r\n        }\r\n    }catch(e){\r\n        return e;\r\n    }\r\n}\r\n\r\n    //Put\r\nexport const PutAsync = async (url, postdata) => {\r\n    try{\r\n        var response = await axios.put(url, postdata )\r\n        const result = Object.keys(response).map((key) => response[key]);\r\n        return{\r\n            status: result[2],\r\n            data: result[0]\r\n        }\r\n    }catch(e){\r\n        return e;\r\n    }\r\n}\r\n\r\n//want to set network middleware to attach tsgLink as axios default header\r\nconst tsgLink = \"https://techtestcalllogapi.azurewebsites.net/api/\";\r\n\r\n//Administration\r\nexport const GetAdminstration = async() => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Adminstration')\r\n    return response\r\n}\r\n\r\nexport const CreateAdminstration = async(postData) => {\r\n    //For Ref\r\n    var refPostdata = {\r\n        name: \"\",\r\n        reason: \"\",\r\n        description: \"\"\r\n    }\r\n\r\n    var response = await PostAsync('https://techtestcalllogapi.azurewebsites.net/api/Adminstration', postData)\r\n    return response\r\n}\r\n \r\n\r\n//Application\r\nexport const GetApplicationById = async(id) => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Application/' + id)\r\n    return response\r\n}\r\n\r\nexport const GetAllApplicationRecords = async() => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Application')\r\n    return response\r\n}\r\n\r\nexport const CreateApplication = async(postData) => {\r\n    //For Reference\r\n    var refPostData = {\r\n        name: \"Test\",\r\n        description: \"Test\",\r\n        hasSupportContract: false,\r\n        customerId: 0\r\n    }\r\n\r\n    var response = await PostAsync('https://techtestcalllogapi.azurewebsites.net/api/Application', postData)\r\n    return response\r\n}\r\n\r\nexport const UpdateApplication = async(putData) => {\r\n        //For Reference\r\n        var refPutData = {\r\n            applicationId: 0,\r\n            name: \"\",\r\n            description: \"\",\r\n            hasSupportContract: false,\r\n        }\r\n\r\n\r\n    var response = await PutAsync('https://techtestcalllogapi.azurewebsites.net/api/Application', putData)\r\n    return response\r\n}\r\n\r\nexport const GetApplicationsByCustomerId = async(id) => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Application/customer/' + id)\r\n    return response\r\n}\r\n\r\n//Call\r\n\r\nexport const GetAllCallLogs = async() => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Call')\r\n    return response\r\n}\r\n\r\nexport const UpdateCallLog = async(patchData) => {\r\n    //For Reference\r\n    var refPatchData = {\r\n        callId: 0,\r\n        status: 0\r\n    }\r\n\r\n\r\n    var response = await PatchAsync('https://techtestcalllogapi.azurewebsites.net/api/Call', patchData)\r\n    return response\r\n}\r\n\r\nexport const GetCallLogById = async(id) => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Call/' + id)\r\n    return response\r\n}\r\n\r\nexport const GetCallLogsByCustomerId = async(id) => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Call/customer/' + id)\r\n    return response\r\n}\r\n\r\n//Customer\r\n\r\nexport const GetAllCustomers = async() => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Customer')\r\n    return response\r\n}\r\n\r\nexport const GetCustomerById = async(id) => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Customer/' + id)\r\n    return response\r\n}\r\n\r\n//Statistics\r\n\r\nexport const GetStatisticsByCustomerId = async(id) => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Statistics/' + id)\r\n    return response\r\n}\r\n\r\n//Status\r\n\r\nexport const GetAllStatus = async() => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Status')\r\n    return response\r\n}\r\n\r\nexport const GetStatusById = async(id) => {\r\n    var response = await GetAsync('https://techtestcalllogapi.azurewebsites.net/api/Status/' + id)\r\n    return response\r\n}","  /**\r\n   * @param {Date} date\r\n   * @returns {string}\r\n  */\r\n \r\n  //Using date options will convert and parse a date into a string.\r\n   export function formatADateAndTime(date){\r\n    if(date === \"0001-01-01T00:00:00\"){\r\n      return \"Not Yet Checked out\"\r\n    }\r\n    else\r\n    {\r\n\r\n    \r\n    const options = \r\n    {\r\n      year: 'numeric', month: 'long', day: 'numeric',\r\n      hour: 'numeric', minute: 'numeric', second: 'numeric',\r\n      hour12: true\r\n    };\r\n    const tempDate = new Date(Date.parse(date));\r\n    const tempDateTime = new Intl.DateTimeFormat('en-GB', options).format(tempDate);\r\n    return tempDateTime;\r\n  }\r\n}","import React, { PureComponent } from 'react';\r\n// import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport {RadarChart, Radar, PieChart, Pie, ScatterChart, Scatter, LineChart, Line, AreaChart, Area, BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport {Label, Container, Card, CardTitle, CardBody} from 'reactstrap'\r\n\r\n\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FF5C33'];\r\n\r\nconst RADIAN = Math.PI / 180;\r\n\r\n//used for filling text to pie area.\r\nconst renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\r\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n  return (\r\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n      {`${(percent * 100).toFixed(0)}%`}\r\n    </text>\r\n  );\r\n};\r\n\r\n\r\nclass ChartWidget extends PureComponent {\r\n\r\nconstructor(props){\r\n    super(props)\r\n\r\n}\r\n\r\n//render specific chart type on given prop, default is bar chart.\r\nrenderChartType(){\r\n  switch(this.props.chartType){\r\n    case \"Bar\": return this.barChart()\r\n    break;\r\n    case \"Line\": return this.lineChart()\r\n    break;\r\n    case \"Area\": return this.areaChart()\r\n    break;\r\n    case \"Pie\": return this.pieChart()\r\n    break;\r\n    case \"Scatter\": return this.scatterChart()\r\n    break;\r\n  default: return this.barChart()\r\n    \r\n  }\r\n}\r\n\r\n\r\n\r\n\r\npieChart(){\r\n  return(\r\n    <PieChart\r\n    width={this.props.width}\r\n    height={this.props.height}\r\n    data={this.props.data}\r\n    >\r\n      <Pie\r\n              data={this.props.data}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              labelLine={false}\r\n              label={renderCustomizedLabel}\r\n              outerRadius={80}\r\n              fill=\"#8884d8\"\r\n              dataKey=\"value\"\r\n            >\r\n              {this.props.data.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n              ))}\r\n            </Pie>\r\n      <Tooltip />\r\n      <Legend  />\r\n    </PieChart>\r\n  )\r\n}\r\n\r\nareaChart(){\r\n  return(\r\n    <AreaChart\r\n    width={this.props.width}\r\n    height={this.props.height}\r\n    data={this.props.data}\r\n      margin={{\r\n          top: 10,\r\n          bottom: 0,\r\n          left: 0,\r\n          right: 0\r\n      }}\r\n  \r\n  >\r\n    <CartesianGrid strokeDasharray=\"3 3\" />\r\n    <XAxis style={{fontSize: 6}} dataKey=\"customerName\" />\r\n    <YAxis />\r\n    <Tooltip />\r\n    <Legend  />\r\n    <Area name={this.props.labelOne} type=\"monotone\"   dataKey={this.props.dataKeyOne} fill=\"#e60000\" />\r\n    <Area name={this.props.labelTwo}  type=\"monotone\"   dataKey={this.props.dataKeyTwo} fill=\"#82ca9d\" />\r\n    <Area name={this.props.labelThree}  type=\"monotone\"   dataKey={this.props.dataKeyThree} fill=\"#8884d8\" />\r\n  </AreaChart>\r\n  )\r\n}\r\n\r\nlineChart() {\r\n  \r\n  return(\r\n    <LineChart\r\n    width={this.props.width}\r\n    height={this.props.height}\r\n    data={this.props.data}\r\n      margin={{\r\n          top: 10,\r\n          bottom: 0,\r\n          left: 0,\r\n          right: 0\r\n      }}\r\n  \r\n  >\r\n    <CartesianGrid strokeDasharray=\"3 3\" />\r\n    <XAxis  style={{fontSize: 6 }} dataKey=\"customerName\" />\r\n    <YAxis />\r\n    <Tooltip />\r\n    <Legend  />\r\n    <Line name={this.props.labelOne} type=\"monotone\" dataKey={this.props.dataKeyOne} fill=\"#8884d8\" />\r\n    <Line name={this.props.labelTwo} type=\"monotone\"  dataKey={this.props.dataKeyTwo} fill=\"#82ca9d\" />\r\n    <Line name={this.props.labelThree} type=\"monotone\"  dataKey={this.props.dataKeyThree} fill=\"#ff5c33\" />\r\n  </LineChart>\r\n  )\r\n}\r\n\r\nbarChart () {\r\nreturn(\r\n  <BarChart\r\n  width={this.props.width}\r\n  height={this.props.height}\r\n  data={this.props.data}\r\n    margin={{\r\n        top: 10,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0\r\n    }}\r\n\r\n>\r\n  <CartesianGrid strokeDasharray=\"3 3\" />\r\n  <XAxis style={{fontSize: 6 }} dataKey=\"customerName\" />\r\n  <YAxis />\r\n  <Tooltip />\r\n  <Legend  />\r\n  <Bar name={this.props.labelOne}   dataKey={this.props.dataKeyOne} fill=\"#8884d8\" />\r\n  <Bar name={this.props.labelTwo}     dataKey={this.props.dataKeyTwo} fill=\"#82ca9d\" />\r\n  <Bar name={this.props.labelThree}     dataKey={this.props.dataKeyThree} fill=\"#ff5c33\" />\r\n</BarChart>\r\n)\r\n}\r\n\r\n\r\nrender() {\r\n    return (\r\n        <Container style={{width: this.props.width + 60, borderRadius: 3, border: \"1px solid lightgrey\", paddingBottom: 5, marginBottom: 5}}>\r\n        <Label style={{textAlign: 'center', fontSize: 20, width: \"100%\", marginTop: 10}}>{this.props.title}</Label>\r\n        {this.renderChartType()}\r\n        </Container>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default ChartWidget","import React, {Component} from 'react'\r\nimport {Table, Alert, Card, CardTitle, CardBody, Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label, Container, Row, Col, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, ListGroup, ListGroupItem } from 'reactstrap';\r\nimport {GetCustomerById, GetApplicationsByCustomerId, UpdateCallLog, GetAllStatus, CreateApplication, UpdateApplication, GetCallLogsByCustomerId, GetStatisticsByCustomerId} from '../utilities/axiosUtility'\r\nimport {formatADateAndTime} from '../utilities/dateUtility'\r\nimport {toast} from 'react-toastify'\r\nimport ChartWidget from '../widgets/ChartWidget'\r\n\r\nclass CustomerDetails extends Component {\r\n\r\nconstructor(props){\r\n    super(props)\r\n\r\n}\r\n\r\n\r\nstate = {\r\n    customer: {\r\n        id: 0,\r\n        name: \"\"\r\n    },\r\n    applications: [],\r\n    calls: [],\r\n    stats: [],\r\n    statusList: [],\r\n    statusDropdownId: 0,\r\n    statusFilterDropdownOpen: false,\r\n    pieClosedCalls: [],\r\n    filteredCalls: [],\r\n    applicationInfo: {\r\n        name: \"\",\r\n        description: \"\",\r\n        hasSupportContract: false,\r\n        id: 0,\r\n      },\r\n    applicationModalOpen: false,\r\n}\r\n\r\ncomponentDidMount(){\r\nthis.getAllCustomerDataById(this.props.match.params.id);\r\n}\r\n\r\n//Toggles applications details modal\r\ntoggleApplicationModal = () => {\r\n    this.setState({applicationModalOpen: !this.state.applicationModalOpen})\r\n  }\r\n\r\n//depending on if a application has been selected, the function will update or create an application.\r\n  newOrUpdateApplication = () => {\r\n    if(this.state.applicationInfo.id === 0)\r\n    {\r\n    var applicationPostData = {\r\n        name: this.state.applicationInfo.name,\r\n        description: this.state.applicationInfo.description,\r\n        hasSupportContract: this.state.applicationInfo.hasSupportContract,\r\n        customerId: this.state.customer.id\r\n      }\r\n      CreateApplication(applicationPostData).then(response => {\r\n        var applications = this.state.applications;\r\n        applications.push(response.data)\r\n        toast.success(\"Application Created\")\r\n        var clearApplicationDetails = {\r\n            name: \"\",\r\n            description: \"\",\r\n            hasSupportContract: false,\r\n            id: 0,\r\n          }\r\n        this.setState({applications: applications, applicationInfo: clearApplicationDetails}, this.toggleApplicationModal())\r\n      })\r\n    }\r\n    else\r\n    {\r\n        var applicationPutData = {\r\n            applicationId: this.state.applicationInfo.id,\r\n            name: this.state.applicationInfo.name,\r\n            description: this.state.applicationInfo.description,\r\n            hasSupportContract: this.state.applicationInfo.hasSupportContract,\r\n        }\r\n\r\n        UpdateApplication(applicationPutData).then(response => {\r\n            if(response.status == \"OK\")\r\n            {\r\n            var applications = this.state.applications;\r\n            applications.map((application, id) => {\r\n                if(application.id === response.data.id)\r\n                {\r\n                    applications[id] = response.data\r\n                }\r\n            })\r\n            toast.success(\"Application Updated\")\r\n            this.setState({applications: applications}, this.toggleApplicationModal())\r\n            }\r\n        }).catch(error => {\r\n            toast.warn(\"Error Updating\")\r\n        })\r\n    }\r\n  }\r\n\r\n//Gets all data avaiable for a customer and sets to state.\r\ngetAllCustomerDataById = async(id) =>{\r\n\r\n    var applicationRes = await GetApplicationsByCustomerId(id);\r\n    var callLogsRes = await GetCallLogsByCustomerId(id);\r\n    var statRes = await GetStatisticsByCustomerId(id);\r\n    var statusRes = await GetAllStatus();\r\n\r\n    if(applicationRes.status === \"OK\")\r\n    {\r\n      this.setState({customer: applicationRes.data[0].customer, applications: applicationRes.data})\r\n    }\r\n\r\n    if(callLogsRes.status === \"OK\")\r\n    {\r\n        this.setState({ calls: callLogsRes.data, filteredCalls: callLogsRes.data})\r\n    }\r\n\r\n    if(statRes.status === \"OK\")\r\n    {\r\n        var pieClosedCalls = [\r\n        {name: \"Total Calls\", value: statRes.data.closedCalls.totalCalls},\r\n        {name: \"Satisfactory\", value: statRes.data.closedCalls.satisfactory},\r\n        {name: \"Unstatisfactory\", value: statRes.data.closedCalls.unsatisfactory}\r\n        ]\r\n        this.setState({stats: statRes.data, pieClosedCalls: pieClosedCalls})\r\n    }\r\n\r\n    if(statusRes.status === \"OK\")\r\n    {\r\n        this.setState({statusList: statusRes.data})\r\n    }\r\n\r\n}\r\n\r\n//Calls GetCustomerById endpoint and stores results in state.\r\ngetCustomerById = async (id) => {\r\n    var customerRes = await GetCustomerById(id)\r\n    if(customerRes.status === \"OK\")\r\n    {\r\n        this.setState({customer: customerRes.data})\r\n    }\r\n}\r\n\r\n//Sets that current applicationInfo state to the currently selected application.\r\nselectCurrentApplication(id){\r\n    var currentApplication = this.state.applicationInfo;\r\n    currentApplication.id = this.state.applications[id].id\r\n    currentApplication.name = this.state.applications[id].name\r\n    currentApplication.description = this.state.applications[id].description\r\n    currentApplication.hasSupportContract = this.state.applications[id].hasSupportContract\r\n\r\n    this.setState({applicationInfo: currentApplication}, this.toggleApplicationModal())\r\n}\r\n\r\n//Updates an applicationInfo field dependent on event.target.name.\r\nonChangeApplicationDetails = (event) => {\r\n    var tempApplicationInfo = {...this.state.applicationInfo}\r\n    if(event.target.type === \"checkbox\")\r\n    {\r\n      tempApplicationInfo[event.target.name] = event.target.checked\r\n    }\r\n    else\r\n    {\r\n      tempApplicationInfo[event.target.name] = event.target.value\r\n    }\r\n    this.setState({applicationInfo: tempApplicationInfo})\r\n   }\r\n  \r\n//Sets status to a call with given parameters, will notify on succes or error.\r\n   setStatusOfCall(callId, status, callsArrayId){\r\n    var patchData = {\r\n        callId: callId,\r\n        status: status\r\n    }\r\n\r\n    UpdateCallLog(patchData).then(response => {\r\n        if(response.status === \"OK\")\r\n        {\r\n            var callsLogs = this.state.calls\r\n            callsLogs[callsArrayId] = response.data;\r\n            this.setState({calls: callsLogs, filteredCalls: callsLogs})\r\n            toast.success(\"Status Changed To \" + response.data.status.description )\r\n        }\r\n        else\r\n        {\r\n            toast.error(\"Error Changing Status\")\r\n        }\r\n    })\r\n}\r\n\r\n//Renders the applications state array into a table, with the ability to view applications details in a modal, or create a new application.\r\nrenderApplicationTable(){\r\n    return(\r\n        <Card>\r\n            <CardBody style={{overflow: 'scroll', height: 760}}>\r\n                <CardTitle style={{width: '100%', textAlign: 'center', fontSize: 25}}>Applications <Button onClick={this.toggleApplicationModal} style={{float: 'right'}} size=\"sm\" color=\"primary\">New</Button></CardTitle>\r\n                <Table hover style={{fontSize: 13}}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Application</th>\r\n                            <th>Install Date</th>\r\n                            <th>Has Support Contract</th>\r\n                            <th>View</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody >\r\n                        {this.state.applications.map((application, id) => {\r\n                            return(\r\n                                <tr key={id}>\r\n                                    <td>{application.name}</td>\r\n                                    <td>{formatADateAndTime(application.installationDate)}</td>\r\n                                    <td>{application.hasSupportContract === true ? \"True\" : \"False\"}</td>\r\n                                    <td><Button onClick={() => this.selectCurrentApplication(id)} size=\"sm\" color=\"primary\">View</Button></td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </Table> \r\n            </CardBody>\r\n       </Card>\r\n    )\r\n}\r\n\r\n//toggles Status dropdown for calls table\r\ntoggleStatusDropdown = (id) => {\r\n    if(this.state.statusDropdownId == id)\r\n    {\r\n        this.setState({statusDropdownId: 0})\r\n    }\r\n    else\r\n    {\r\n        this.setState({statusDropdownId: id})\r\n    }\r\n}\r\n\r\n//Toggles Filter dropdown for calls status\r\ntoggleFilterStatusDropdown = () => {\r\n        this.setState({statusFilterDropdownOpen: !this.state.statusFilterDropdownOpen})\r\n}\r\n\r\n//Filters through calls array \r\nfilterByStatus = (status) => {\r\n    if(status == \"All\")\r\n    {\r\n        this.setState({filteredCalls: this.state.calls})\r\n    }\r\n    else\r\n    {\r\n    var filteredStatus = this.state.calls.filter(calls => calls.status.description == status)\r\n    this.setState({filteredCalls: filteredStatus})\r\n    }\r\n}\r\n\r\n//Renders the Calls table, using Button dropdowns for both filtering and setting a status.\r\nrenderCallsTable(){\r\n    return(\r\n        <Card>\r\n            <CardBody style={{overflow: 'scroll', height: 760}}>\r\n                <CardTitle style={{width: \"100%\", textAlign: 'center', fontSize: 25 }}>Calls</CardTitle>\r\n                <Table  hover style={{fontSize: 13}}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Application</th>\r\n                            <th>Description</th>\r\n                            <th>Status    \r\n                            <ButtonDropdown style={{paddingLeft: 5}} isOpen={this.state.statusFilterDropdownOpen} toggle={() => this.toggleFilterStatusDropdown()}>\r\n                                <DropdownToggle caret size=\"sm\">\r\n                                Filter Status\r\n                                </DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {this.state.statusList.map((status, statusArrayId) => {\r\n                                    \r\n                                        return(\r\n                                            <DropdownItem id={statusArrayId} onClick={() => this.filterByStatus(status.description)}>{status.description}</DropdownItem>\r\n                                        )\r\n                                        \r\n                                    })}\r\n                                    <DropdownItem  onClick={() => this.filterByStatus(\"All\")}>All</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </ButtonDropdown>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                            {this.state.filteredCalls.map((call, callArrayId) => {\r\n                                return(\r\n                                    <tr key={callArrayId}>\r\n                                        <td>{call.application.name}</td>\r\n                                        <td>{call.description}</td>\r\n                                        <td>   \r\n                                        <ButtonDropdown isOpen={this.state.statusDropdownId == call.id ? true : false} toggle={() => this.toggleStatusDropdown(call.id)}>\r\n                                            <DropdownToggle caret>\r\n                                            {call.status.description}\r\n                                            </DropdownToggle>\r\n                                            <DropdownMenu>\r\n                                                {this.state.statusList.map((status, statusArrayId) => {\r\n                                                    if(status.description === call.status.description)\r\n                                                    {\r\n                                                        \r\n                                                    }\r\n                                                    else\r\n                                                    {\r\n                                                    return(\r\n                                                        <DropdownItem id={statusArrayId} onClick={() => this.setStatusOfCall(call.id, status.id, callArrayId)}>{status.description}</DropdownItem>\r\n                                                    )\r\n                                                    }\r\n                                                })}\r\n                                            </DropdownMenu>\r\n                                        </ButtonDropdown>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                    </tbody>\r\n                </Table>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nrender(){\r\n    const modalTitleHeader = this.state.applicationInfo.id === 0 ? \"New Application\" : \"Edit Application\";\r\n    \r\n    return(\r\n        <div>\r\n            <Label style={{width: \"100%\", textAlign: \"center\", fontSize: 40}}>{this.state.customer.name}</Label>\r\n            <Row style={{margin: 5}}>\r\n                <Col xs={4}>\r\n                    {this.renderApplicationTable()}\r\n                </Col>\r\n                <Col xs={4}>\r\n                    {this.renderCallsTable()}\r\n                </Col>\r\n                <Col>\r\n                    <Row style={{paddingBottom: 40}}>\r\n                    <ChartWidget width={200} height={300} title=\"Open Calls\" data={[this.state.stats.openCalls]} labelOne=\"Total Calls\" labelTwo=\"Responded\" labelThree=\"Awaiting Response\" dataKeyOne=\"totalCalls\" dataKeyTwo=\"responded\" dataKeyThree=\"awaitingResponse\" />\r\n                    <ChartWidget chartType=\"Pie\" width={200} height={300} title=\"Closed Calls\" data={this.state.pieClosedCalls} labelOne=\"Total Calls\" labelTwo=\"Satisfactory\" labelThree=\"Unsatisfactory\" dataKeyOne=\"totalCalls\" dataKeyTwo=\"satisfactory\" dataKeyThree=\"unsatisfactory\" />\r\n                    </Row>\r\n                    <ChartWidget  width={200} height={300} title=\"Last 3 Months\" data={[this.state.stats.lastThreeMonths]} labelOne=\"Month 1\" labelTwo=\"Month 2\" labelThree=\"Month 3\" dataKeyOne=\"month1\" dataKeyTwo=\"month2\" dataKeyThree=\"month3\" />\r\n                </Col>\r\n            </Row>\r\n            <Modal isOpen={this.state.applicationModalOpen} toggle={this.toggleApplicationModal}>\r\n                <ModalHeader toggle={this.toggleApplicationModal}>{modalTitleHeader}</ModalHeader>\r\n                <ModalBody>\r\n                    <Form>\r\n                    <FormGroup>\r\n                        <Label for=\"newApplicationName\" sm={2}>Name</Label>\r\n                        <Input onChange={e => this.onChangeApplicationDetails(e)} value={this.state.applicationInfo.name} name=\"name\" id=\"newApplicationName\" placeholder=\"Application Name\" />\r\n                        <Label for=\"newApplicationDescription\" sm={2}>Description</Label>\r\n                        <Input onChange={e => this.onChangeApplicationDetails(e)} value={this.state.applicationInfo.description} name=\"description\" id=\"newApplicationDescription\" placeholder=\"Application Description\" />\r\n                    </FormGroup>\r\n                    <FormGroup check>\r\n                        <Label check>\r\n                        <Input onChange={e => this.onChangeApplicationDetails(e)} type=\"checkbox\" name=\"hasSupportContract\" checked={this.state.applicationInfo.hasSupportContract} />{' '}\r\n                        Has Support Contract\r\n                        </Label>\r\n                    </FormGroup>\r\n                    </Form>\r\n                </ModalBody>\r\n                <ModalFooter> \r\n                    <Button color=\"primary\" onClick={this.newOrUpdateApplication}>Save</Button>{' '}\r\n                    <Button color=\"secondary\" onClick={this.toggleApplicationModal}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n}\r\n\r\nexport default CustomerDetails","//SHOW Statisics\r\nimport React, {Component} from 'react';\r\nimport {Container, Row, Col} from 'reactstrap';\r\nimport {GetAllCustomers, GetStatisticsByCustomerId} from '../utilities/axiosUtility'\r\nimport ChartWidget from '../widgets/ChartWidget'\r\n\r\nclass Dashboard extends Component {\r\n\r\nconstructor(){\r\n    super()\r\n}\r\n\r\nstate = {\r\n    stats: [],\r\n    customers: [],\r\n    openCalls: [],\r\n    closedCalls: [],\r\n    lastThreeMonths: [],\r\n}\r\n\r\ncomponentDidMount(){\r\nthis.getStatistics()\r\n}\r\n\r\n\r\n//Gets All Stats By All Customers and passes to buildStatistics function.\r\ngetStatistics(){\r\n    GetAllCustomers().then(async(response) => {\r\n        const statList = await Promise.all(response.data.map(async (customer, id) => {\r\n           var statResponse = await GetStatisticsByCustomerId(customer.id)\r\n           if(statResponse.status == \"OK\")\r\n           {\r\n           return statResponse.data\r\n           }\r\n        }))\r\n    this.buildStatistics(statList, response.data);\r\n    })\r\n}\r\n\r\n//Builds 3 Stats Arrays for use in Chartwidget\r\nbuildStatistics(stats, customers){\r\n    var tempOpenCalls = stats.map((stat, id) => {\r\n        var call = {\r\n            customerName: stat.customer.name,\r\n            totalCalls: stat.openCalls.totalCalls,\r\n            responded: stat.openCalls.responded,\r\n            awaitingResponse: stat.openCalls.awaitingResponse\r\n        }\r\n\r\n        return call\r\n    })\r\n\r\n    var tempClosedCalls = stats.map((stat, id) => {\r\n        var call = {\r\n            customerName: stat.customer.name,\r\n            totalCalls: stat.closedCalls.totalCalls,\r\n            satisfactory: stat.closedCalls.satisfactory,\r\n            unsatisfactory: stat.closedCalls.unsatisfactory\r\n        }\r\n\r\n        return call\r\n    })\r\n\r\n    var tempLastThreeMonths = stats.map((stat, id) => {\r\n        var call = {\r\n            customerName: stat.customer.name,\r\n            month1: stat.lastThreeMonths.month1,\r\n            month2: stat.lastThreeMonths.month2,\r\n            month3: stat.lastThreeMonths.month3\r\n        }\r\n\r\n        return call\r\n    })\r\n\r\n    this.setState({openCalls: tempOpenCalls, closedCalls: tempClosedCalls, lastThreeMonths: tempLastThreeMonths, stats: stats, customers: customers})\r\n}\r\n\r\nrender()\r\n{\r\n    return(\r\n        <Container style={{padding: 10, }}>\r\n            <Row >\r\n                <ChartWidget  width={500} height={350} title=\"Open Calls\" data={this.state.openCalls} labelOne=\"Total Calls\" labelTwo=\"Responded\" labelThree=\"Awaiting Response\" dataKeyOne=\"totalCalls\" dataKeyTwo=\"responded\" dataKeyThree=\"awaitingResponse\" />\r\n                <ChartWidget width={500} height={350} title=\"Closed Calls\" data={this.state.closedCalls} labelOne=\"Total Calls\" labelTwo=\"Satisfactory\" labelThree=\"Unsatisfactory\" dataKeyOne=\"totalCalls\" dataKeyTwo=\"satisfactory\" dataKeyThree=\"unsatisfactory\" />\r\n                <ChartWidget chartType=\"Line\" width={500} height={350} title=\"Last 3 Months\" data={this.state.lastThreeMonths} labelOne=\"Month 1\" labelTwo=\"Month 2\" labelThree=\"Month 3\" dataKeyOne=\"month1\" dataKeyTwo=\"month2\" dataKeyThree=\"month3\" />\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n}\r\nexport default Dashboard","import React, {Component} from 'react'\r\nimport {GetAllCustomers,  UpdateCallLog, GetCallLogsByCustomerId, GetAllStatus} from '../utilities/axiosUtility'\r\nimport {Table, Container, Card, CardTitle, CardBody, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, TabContent} from 'reactstrap';\r\nimport {toast} from 'react-toastify'\r\n\r\nclass Calls extends Component {\r\n\r\nconstructor(props){\r\n    super()\r\n}\r\n\r\nstate = {\r\n    calls: [],\r\n    filteredCalls: [],\r\n    callsTableData: [],\r\n    statusList: [],\r\n    statusDropdownId: 0,\r\n    statusFilterDropdownOpen: false\r\n}\r\n\r\ncomponentDidMount(){\r\nthis.getAllCalls()\r\n}\r\n\r\n\r\ntoggleStatusDropdown = (id) => {\r\n    if(this.state.statusDropdownId == id)\r\n    {\r\n        this.setState({statusDropdownId: 0})\r\n    }\r\n    else\r\n    {\r\n        this.setState({statusDropdownId: id})\r\n    }\r\n}\r\n\r\ntoggleFilterStatusDropdown = () => {\r\n    this.setState({statusFilterDropdownOpen: !this.state.statusFilterDropdownOpen})\r\n}\r\n\r\n//filters currents calls by given status.\r\nfilterByStatus = (status) => {\r\n    if(status == \"All\")\r\n    {\r\n        this.setState({filteredCalls: this.state.calls})\r\n    }\r\n    else\r\n    {\r\n    var filteredStatus = this.state.calls.filter(calls => calls.status.description == status)\r\n    this.setState({filteredCalls: filteredStatus})\r\n    }\r\n}\r\n\r\n\r\n//Gets all call by all customers and sets them to statusList state.\r\ngetAllCalls(){\r\n    GetAllCustomers().then(async(response) => {\r\n        const callList = await Promise.all(response.data.map(async (customer, id) => {\r\n           var callResponse = await GetCallLogsByCustomerId(customer.id)\r\n           if(callResponse.status == \"OK\")\r\n           {\r\n           return callResponse.data\r\n           }\r\n        }))\r\n\r\n        const statusResponse = await GetAllStatus()\r\n        if(statusResponse.status == \"OK\")\r\n        {\r\n            this.setState({statusList: statusResponse.data})\r\n        }\r\n    this.buildCallsTableData(callList, response.data);\r\n    })\r\n}\r\n\r\n//Sets status to a call with given parameters, will notify on succes or error.\r\nsetStatusOfCall(callId, status, callsArrayId){\r\n    var patchData = {\r\n        callId: callId,\r\n        status: status\r\n    }\r\n\r\n    UpdateCallLog(patchData).then(response => {\r\n        if(response.status === \"OK\")\r\n        {\r\n        var callsLogs = this.state.calls\r\n        callsLogs[callsArrayId] = response.data;\r\n        this.setState({calls: callsLogs, filteredCalls: callsLogs})\r\n        toast.success(\"Status Changed To \" + response.data.status.description )\r\n        }\r\n        else\r\n        {\r\n        toast.error(\"Error Changing Status\")\r\n        }\r\n    })\r\n}\r\n\r\nbuildCallsTableData(callList, customers)\r\n{\r\n    var totalCalls = []\r\n    callList.map((calls, id) => {\r\n        totalCalls = totalCalls.concat(calls) \r\n    })\r\n\r\n    var tableData = totalCalls.map((call, id) => {\r\n        var record = {\r\n            callId: call.id,\r\n            applicationName: call.application.name,\r\n            description: call.description,\r\n            customerName: call.customer.name,\r\n            status: \r\n            <div>\r\n                {call.status.description}\r\n                <ButtonDropdown isOpen={this.state.statusDropdownId == call.id ? true : false} toggle={() => this.toggleStatusDropdown(call.id)}>\r\n                    <DropdownToggle caret>\r\n                        {call.status.description}\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                        {this.state.statusList.map((status, id) => {\r\n                            return(\r\n                                <DropdownItem>{status.description}</DropdownItem>\r\n                            )\r\n                        })}\r\n                    </DropdownMenu>\r\n                </ButtonDropdown>\r\n            </div>\r\n        }\r\n        return record\r\n    })\r\n    this.setState({callsTableData: tableData, calls: totalCalls, filteredCalls: totalCalls})\r\n}\r\n\r\n\r\nrender(){\r\n\r\n    return(\r\n        <Container style={{padding: 30}}>\r\n            <Card style={{width: 900}}>\r\n                <CardBody style={{overflow: 'scroll', height: 760}}>\r\n                    <CardTitle style={{width: \"100%\", textAlign: 'center', fontSize: 27, }}>Calls</CardTitle>\r\n                    <Table hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Application</th>\r\n                                <th>Description</th>\r\n                                <th>Customer Name</th>\r\n                                <th>Status\r\n                                <ButtonDropdown style={{paddingLeft: 5}} isOpen={this.state.statusFilterDropdownOpen} toggle={() => this.toggleFilterStatusDropdown()}>\r\n                                <DropdownToggle caret size=\"sm\">\r\n                                Filter Status\r\n                                </DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {this.state.statusList.map((status, statusArrayId) => {\r\n                                    \r\n                                        return(\r\n                                            <DropdownItem id={statusArrayId} onClick={() => this.filterByStatus(status.description)}>{status.description}</DropdownItem>\r\n                                        )\r\n                                        \r\n                                    })}\r\n                                    <DropdownItem  onClick={() => this.filterByStatus(\"All\")}>All</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </ButtonDropdown>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody> \r\n                                {this.state.filteredCalls.map((call, callArrayId) => {\r\n                                    return(\r\n                                        <tr>\r\n                                            <td>{call.application.name}</td>\r\n                                            <td>{call.description}</td>\r\n                                            <td>{call.customer.name}</td>\r\n                                            <td>   \r\n                                            <ButtonDropdown isOpen={this.state.statusDropdownId == call.id ? true : false} toggle={() => this.toggleStatusDropdown(call.id)}>\r\n                                                <DropdownToggle caret>\r\n                                                {call.status.description}\r\n                                                </DropdownToggle>\r\n                                                <DropdownMenu>\r\n                                                    {this.state.statusList.map((status, statusArrayId) => {\r\n                                                        if(status.description === call.status.description)\r\n                                                        {\r\n                                                            \r\n                                                        }\r\n                                                        else\r\n                                                        {\r\n                                                        return(\r\n                                                            <DropdownItem onClick={() => this.setStatusOfCall(call.id, status.id, callArrayId)}>{status.description}</DropdownItem>\r\n                                                        )\r\n                                                        }\r\n                                                    })}\r\n                                                </DropdownMenu>\r\n                                            </ButtonDropdown>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                        </tbody>\r\n                    </Table>\r\n                </CardBody>\r\n            </Card>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nexport default Calls","import React, {useState, useEffect} from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavbarText\r\n  } from 'reactstrap';\r\nimport {GetAllCustomers} from '../utilities/axiosUtility'\r\nimport { Link} from 'react-router-dom'\r\n\r\n\r\nexport function TopNavBar(){\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [customerList, setCustomerList] = useState([])\r\n    const [SelectedCustomer, setSelectedCustomer] = useState({id: 0, name: \"Customers\"})\r\n    const [navSelected, setNavSelected] =  useState(0);\r\n    console.log(window.location.pathname)\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    //Gets all customers to produce a customer list for drop down and sets customer name as title if valid id is passed. \r\n    useEffect(() => {\r\n      GetAllCustomers().then(response => {\r\n        if(response.status === \"OK\")\r\n        {\r\n          if(window.location.pathname.includes(\"/customerdetails\"))\r\n          {\r\n            var customerId = parseInt(window.location.pathname.slice(17))\r\n            var currentCustomer = {id: 0, name: \"Customers\"} \r\n            response.data.map((customer, id) => {\r\n              if(customer.id === customerId)\r\n              {\r\n                currentCustomer = customer\r\n                \r\n              }\r\n            })\r\n            setCustomerList(response.data)\r\n            setSelectedCustomer(currentCustomer);\r\n          }\r\n          else\r\n          {\r\n           var currentCustomer = {\r\n                id: 0,\r\n                name: \"Customers\"\r\n           }\r\n          setCustomerList(response.data)\r\n          setSelectedCustomer(currentCustomer)\r\n          }\r\n        }\r\n      })\r\n    }, [])\r\n\r\n    function customerSelect(customer){\r\n      var currentCustomer = {...SelectedCustomer};\r\n      currentCustomer.id = customer.id;\r\n      currentCustomer.name = customer.name\r\n      setSelectedCustomer(currentCustomer);\r\n   \r\n    }\r\n    return(\r\n        <div style={{fontSize: 20}}>\r\n          <Navbar color=\"light\" light expand=\"md\">\r\n            <NavbarToggler onClick={toggle} />\r\n            <Collapse isOpen={isOpen} navbar>\r\n              <Nav className=\"mr-auto\" navbar>\r\n                <NavItem >\r\n                  <NavLink onClick={() => setNavSelected(1)}><Link style={{color: navSelected == 1 ? \"black\" : \"grey\"}} to=\"/dashboard\">Dashboard</Link></NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink onClick={() => setNavSelected(2)}><Link style={{color: navSelected == 2 ? \"black\" : \"grey\"}} to=\"/calls\">Calls</Link></NavLink>\r\n                </NavItem>\r\n                <UncontrolledDropdown nav inNavbar>\r\n                  <DropdownToggle style={{color: navSelected == 3 ? \"black\" : \"grey\"}}  nav caret>\r\n                    {SelectedCustomer.name}\r\n                  </DropdownToggle>\r\n                  <DropdownMenu left={true}>\r\n                    {customerList.map((customer, id) => {\r\n                      return(\r\n                        <DropdownItem key={id} onClick={() => {customerSelect(customer); setNavSelected(3)}}><Link to={`/customerdetails/${customer.id}`}>{customer.name} </Link></DropdownItem>\r\n                      )\r\n                    })}\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n              </Nav>\r\n              <NavbarText></NavbarText>\r\n            </Collapse>\r\n          </Navbar>\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n\r\n\r\n}","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, {useState, useEffect} from 'react';\r\nimport {BrowserRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport CustomerDetails from './pages/CustomerDetails'\r\nimport Dashboard from './pages/Dashboard';\r\nimport Calls from './pages/Calls';\r\nimport {ToastContainer} from 'react-toastify';\r\nimport {TopNavBar} from './layouts/TopNavBar'\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Router>\r\n    <TopNavBar />\r\n      <Switch>\r\n        <Route path=\"/customerdetails/:id\" exact component={CustomerDetails}/>\r\n        <Route path=\"/calls\" exact component={Calls}/>\r\n        <Route path=\"/dashboard\" exact component={Dashboard}/>\r\n        <Redirect to=\"/dashboard\"/>\r\n      </Switch>\r\n    <ToastContainer />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}